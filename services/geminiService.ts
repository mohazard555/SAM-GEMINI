
import { GoogleGenAI, Modality } from "@google/genai";
import type { UploadedImage } from '../types';

/**
 * Generates an image using the Gemini API based on a text prompt and an optional reference image.
 *
 * @param prompt The text prompt describing the desired image.
 * @param image An optional object containing the base64 data and MIME type of a reference image.
 * @returns A promise that resolves to the base64 string of the generated image.
 */
export async function generateImage(
  prompt: string,
  image?: UploadedImage | null
): Promise<string> {
  // IMPORTANT: The API key is accessed from environment variables.
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set.");
  }
  
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  // The parts array will hold the different components of our prompt (image and text).
  const parts: ({ text: string } | { inlineData: { data: string; mimeType: string; } })[] = [];

  // If an image is provided, add it as the first part.
  // The model will use this as a reference.
  if (image) {
    parts.push({
      inlineData: {
        data: image.data,
        mimeType: image.mimeType,
      },
    });
  }

  // Add the text prompt.
  // If an image was also provided, this text will act as instructions
  // on how to modify or what to generate based on the image.
  if (prompt) {
    parts.push({ text: prompt });
  }
  
  if (parts.length === 0) {
      throw new Error("Prompt and/or image must be provided.");
  }

  // The 'contents' field should be an array of 'Content' objects.
  // Each 'Content' object has a 'parts' array.
  // For a single user turn with multiple parts (image + text),
  // we wrap our 'parts' array inside a single 'Content' object within the main array.
  // This was changed from `contents: { parts }` to `contents: [{ parts }]` to fix the issue.
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash-image',
    contents: [{ parts: parts }],
    config: {
      responseModalities: [Modality.IMAGE],
    },
  });

  // Extract the generated image data from the response.
  for (const part of response.candidates?.[0]?.content?.parts || []) {
    if (part.inlineData) {
      return part.inlineData.data;
    }
  }

  // If no image is found in the response, throw an error.
  throw new Error("No image was generated by the API.");
}
